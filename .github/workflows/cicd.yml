# .github/workflows/cicd.yml
name: CI/CD Pipeline Docker -> Manifest Update (Per Service)

on:
  push:
    branches: [ "develop" ]
    paths:
      - 'api-gateway/**'
      - 'docproc-service/**'
      - 'embedding-service/**'
      - 'ingest-service/**'
      - 'query-service/**'
      - 'reranker-service/**'
      - 'sparse-search-service/**'
      - '.github/workflows/cicd.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_REPO_OWNER: dev-nyro
  MANIFEST_REPO_OWNER: dev-nyro
  MANIFEST_REPO_NAME: manifests-nyro
  MANIFEST_REPO_BRANCH: develop

jobs:
  detect-changed-services:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      changed_services_json: ${{ steps.set-changed-services.outputs.changed_services_json }}
      any_service_changed: ${{ steps.set-changed-services.outputs.any_service_changed }}
    permissions:
      contents: read 
      pull-requests: read 
      
    steps:
      - name: Checkout application code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Decide if we need to calculate changed files
        id: diff_check
        shell: bash
        run: |
          BEFORE_SHA="${{ github.event.before }}"
          AFTER_SHA="${{ github.sha }}"
          echo "Before SHA: $BEFORE_SHA"
          echo "After SHA : $AFTER_SHA"
          if [ "$BEFORE_SHA" = "0000000000000000000000000000000000000000" ]; then
            echo "Initial push detected or history not available, assuming all services require check (tj-actions will compare against latest commit)."
            echo "run_changed_files_action=true"  >> "$GITHUB_OUTPUT"
            echo "base_sha_for_action="           >> "$GITHUB_OUTPUT" 
          elif [ "$BEFORE_SHA" != "$AFTER_SHA" ]; then
            echo "Changes detected, will run diff."
            echo "run_changed_files_action=true"  >> "$GITHUB_OUTPUT"
            echo "base_sha_for_action=$BEFORE_SHA" >> "$GITHUB_OUTPUT"
          else
            echo "No diff between BEFORE and AFTER SHA, likely a direct push to branch head or workflow re-run."
            echo "run_changed_files_action=false" >> "$GITHUB_OUTPUT"
            echo "base_sha_for_action="           >> "$GITHUB_OUTPUT"
          fi

      - name: Get changed files per service (tj-actions)
        id: changed_files
        if: steps.diff_check.outputs.run_changed_files_action == 'true'
        uses: tj-actions/changed-files@v44
        with:
          base_sha: ${{ steps.diff_check.outputs.base_sha_for_action }}
          files_yaml: |
            api-gateway:
              - 'api-gateway/**'
            docproc-service:
              - 'docproc-service/**'
            embedding-service:
              - 'embedding-service/**'
            ingest-service:
              - 'ingest-service/**'
            query-service:
              - 'query-service/**'
            reranker-service:
              - 'reranker-service/**'
            sparse-search-service:
              - 'sparse-search-service/**'
            workflow-itself: 
              - '.github/workflows/cicd.yml'
          fail_on_initial_diff_error: false
          escape_json: false


      - name: Set changed services output as JSON
        id: set-changed-services
        shell: bash
        run: |
          declare -a changed_service_ids
          ANY_CHANGED="false"
          
          echo "--- Checking changed files outputs from tj-actions ---"
          echo "api-gateway_any_changed: ${{ steps.changed_files.outputs.api-gateway_any_changed }}"
          echo "docproc-service_any_changed: ${{ steps.changed_files.outputs.docproc-service_any_changed }}"
          echo "embedding-service_any_changed: ${{ steps.changed_files.outputs.embedding-service_any_changed }}"
          echo "ingest-service_any_changed: ${{ steps.changed_files.outputs.ingest-service_any_changed }}"
          echo "query-service_any_changed: ${{ steps.changed_files.outputs.query-service_any_changed }}"
          echo "reranker-service_any_changed: ${{ steps.changed_files.outputs.reranker-service_any_changed }}"
          echo "sparse-search-service_any_changed: ${{ steps.changed_files.outputs.sparse-search-service_any_changed }}"
          echo "workflow-itself_any_changed: ${{ steps.changed_files.outputs.workflow-itself_any_changed }}"
          echo "-------------------------------------------------------"

          # CORRECCIÓN: Ya no se marcan todos los servicios si solo el workflow cambia.
          # Simplemente se verifica si el workflow cambió para la bandera ANY_CHANGED general.
          if [[ "${{ steps.changed_files.outputs.workflow-itself_any_changed }}" == "true" ]]; then
            echo "Workflow file itself changed."
            ANY_CHANGED="true" # Un cambio en el workflow significa que "algo" cambió.
          fi

          # Construir la lista de servicios cambiados basándose en sus directorios.
          [ "${{ steps.changed_files.outputs.api-gateway_any_changed }}" == "true" ] && changed_service_ids+=("api-gateway") && ANY_CHANGED="true"
          [ "${{ steps.changed_files.outputs.docproc-service_any_changed }}" == "true" ] && changed_service_ids+=("docproc-service") && ANY_CHANGED="true"
          [ "${{ steps.changed_files.outputs.embedding-service_any_changed }}" == "true" ] && changed_service_ids+=("embedding-service") && ANY_CHANGED="true"
          [ "${{ steps.changed_files.outputs.ingest-service_any_changed }}" == "true" ] && changed_service_ids+=("ingest-service") && ANY_CHANGED="true"
          [ "${{ steps.changed_files.outputs.query-service_any_changed }}" == "true" ] && changed_service_ids+=("query-service") && ANY_CHANGED="true"
          [ "${{ steps.changed_files.outputs.reranker-service_any_changed }}" == "true" ] && changed_service_ids+=("reranker-service") && ANY_CHANGED="true"
          [ "${{ steps.changed_files.outputs.sparse-search-service_any_changed }}" == "true" ] && changed_service_ids+=("sparse-search-service") && ANY_CHANGED="true"
          
          JSON_OUTPUT=$(printf '%s\n' "${changed_service_ids[@]}" | jq -R . | jq -s .)
          
          echo "Changed service IDs: ${changed_service_ids[*]}"
          echo "Generated JSON: $JSON_OUTPUT"
          echo "Any service changed flag: $ANY_CHANGED"

          echo "changed_services_json<<EOF" >> "$GITHUB_OUTPUT"
          echo "$JSON_OUTPUT" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          
          echo "any_service_changed=$ANY_CHANGED" >> "$GITHUB_OUTPUT"

  build-and-update-service:
    name: Build and Update ${{ matrix.service.name }}
    needs: detect-changed-services
    if: needs.detect-changed-services.outputs.any_service_changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read 
      packages: write 
      pull-requests: read 

    strategy:
      fail-fast: false
      matrix:
        service:
          - name: "API Gateway"
            id: "api-gateway"
            dir: "api-gateway"
            image_repo_name: "api-gateway"
            manifest_configs: |
              [
                {"path": "api-gateway/deployment.yaml", "container_name": "api-gateway"}
              ]
          - name: "DocProc Service"
            id: "docproc-service"
            dir: "docproc-service"
            image_repo_name: "docproc-service"
            manifest_configs: |
              [
                {"path": "docproc-service/deployment.yaml", "container_name": "docproc-service"}
              ]
          - name: "Embedding Service"
            id: "embedding-service"
            dir: "embedding-service"
            image_repo_name: "embedding-service"
            manifest_configs: |
              [
                {"path": "embedding-service/deployment.yaml", "container_name": "embedding-service"}
              ]
          - name: "Ingest Service"
            id: "ingest-service"
            dir: "ingest-service"
            image_repo_name: "ingest-service"
            manifest_configs: |
              [
                {"path": "ingest-service/deployment-api.yaml", "container_name": "ingest-api"},
                {"path": "ingest-service/deployment-worker.yaml", "container_name": "ingest-worker"}
              ]
          - name: "Query Service"
            id: "query-service"
            dir: "query-service"
            image_repo_name: "query-service"
            manifest_configs: |
              [
                {"path": "query-service/deployment.yaml", "container_name": "query-service"}
              ]
          - name: "Reranker Service"
            id: "reranker-service"
            dir: "reranker-service"
            image_repo_name: "reranker-service"
            manifest_configs: |
              [
                {"path": "reranker-service/deployment.yaml", "container_name": "reranker-service"}
              ]
          - name: "Sparse Search Service"
            id: "sparse-search-service"
            dir: "sparse-search-service"
            image_repo_name: "sparse-search-service"
            manifest_configs: |
              [
                {"path": "sparse-search-service/deployment.yaml", "container_name": "sparse-search-service-container"},
                {"path": "sparse-search-service/cronjob.yaml", "container_name": "index-builder-container"}
              ]

    steps:
    - name: Determine if build is required for ${{ matrix.service.name }}
      id: service_build_needed
      shell: bash
      run: |
        echo "Checking if ${{ matrix.service.id }} is in '${{ needs.detect-changed-services.outputs.changed_services_json }}'"
        # Si changed_services_json está vacío (ej. solo cambió el workflow), is_changed será false.
        if [[ -z "${{ needs.detect-changed-services.outputs.changed_services_json }}" || "${{ needs.detect-changed-services.outputs.changed_services_json }}" == "[]" ]]; then
          is_changed="false"
        else
          is_changed=$(echo '${{ needs.detect-changed-services.outputs.changed_services_json }}' | jq --arg id_to_check "${{ matrix.service.id }}" 'any(. == $id_to_check)')
        fi

        if [[ "$is_changed" == "true" ]]; then
          echo "build_required=true" >> "$GITHUB_OUTPUT"
          echo "Service ${{ matrix.service.name }} needs to be built."
        else
          echo "build_required=false" >> "$GITHUB_OUTPUT"
          echo "Service ${{ matrix.service.name }} does NOT need to be built."
        fi

    - name: Checkout application code
      if: steps.service_build_needed.outputs.build_required == 'true'
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      if: steps.service_build_needed.outputs.build_required == 'true'
      uses: docker/setup-buildx-action@v3

    - name: Log in to GHCR
      if: steps.service_build_needed.outputs.build_required == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate image tag
      id: image_tag_generator
      if: steps.service_build_needed.outputs.build_required == 'true'
      run: |
        TAG="${{ github.ref_name }}-$(echo $GITHUB_SHA | cut -c1-7)"
        TAG=$(echo "$TAG" | sed 's/[^a-zA-Z0-9.-]/-/g' | sed 's/^[.-]*//;s/[.-]*$//')
        TAG=${TAG::128}
        echo "image_tag=$TAG" >> "$GITHUB_OUTPUT"
        echo "Generated image tag for ${{ matrix.service.name }}: $TAG"

    - name: Build and push ${{ matrix.service.name }}
      id: build_and_push_service
      if: steps.service_build_needed.outputs.build_required == 'true'
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service.dir }}
        file: ${{ matrix.service.dir }}/Dockerfile
        push: ${{ github.event_name == 'push' }} 
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_REPO_OWNER }}/${{ matrix.service.image_repo_name }}:${{ steps.image_tag_generator.outputs.image_tag }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=registry 

    - name: Evaluate build result
      id: build_evaluation
      if: steps.service_build_needed.outputs.build_required == 'true' && github.event_name == 'push'
      shell: bash
      run: |
        IMAGE_BUILT="false"
        if [[ "${{ steps.build_and_push_service.outputs.digest }}" != "" && "${{ steps.build_and_push_service.outcome }}" == "success" ]]; then
          IMAGE_BUILT="true"
        fi
        echo "image_successfully_built=${IMAGE_BUILT}" >> "$GITHUB_OUTPUT"
        echo "${{ matrix.service.name }} - Image successfully built: ${IMAGE_BUILT}"
        echo "${{ matrix.service.name }} - Digest: ${{ steps.build_and_push_service.outputs.digest }}"
        echo "${{ matrix.service.name }} - Outcome: ${{ steps.build_and_push_service.outcome }}"

    - name: Install yq
      if: steps.build_evaluation.outputs.image_successfully_built == 'true'
      run: |
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq
        yq --version

    - name: Checkout Manifests Repository
      if: steps.build_evaluation.outputs.image_successfully_built == 'true'
      uses: actions/checkout@v4
      with:
        repository: ${{ env.MANIFEST_REPO_OWNER }}/${{ env.MANIFEST_REPO_NAME }}
        ref: ${{ env.MANIFEST_REPO_BRANCH }}
        token: ${{ secrets.MANIFEST_PAT }} 
        path: manifests-repo 

    - name: Update Manifest Files for ${{ matrix.service.name }}
      id: update_manifests_script
      if: steps.build_evaluation.outputs.image_successfully_built == 'true'
      env:
        MANIFEST_CONFIGS_JSON_STRING: ${{ matrix.service.manifest_configs }}
        FULL_IMAGE_NAME_BASE: ${{ env.REGISTRY }}/${{ env.IMAGE_REPO_OWNER }}/${{ matrix.service.image_repo_name }}
        NEW_IMAGE_TAG: ${{ steps.image_tag_generator.outputs.image_tag }}
        MANIFEST_REPO_PATH: manifests-repo
      shell: bash
      run: |
        cd "${MANIFEST_REPO_PATH}"
        if [ -z "$NEW_IMAGE_TAG" ]; then
          echo "::error::NEW_IMAGE_TAG is empty in update_manifest_files step for ${{ matrix.service.name }}. Aborting manifest update."
          exit 1
        fi
        TARGET_IMAGE_WITH_TAG="${FULL_IMAGE_NAME_BASE}:${NEW_IMAGE_TAG}"

        echo "Manifest configs JSON for ${{ matrix.service.name }}: ${MANIFEST_CONFIGS_JSON_STRING}"
        echo "Target image with tag for ${{ matrix.service.name }}: ${TARGET_IMAGE_WITH_TAG}"

        echo "${MANIFEST_CONFIGS_JSON_STRING}" | yq -r '.[] | .path + "|" + .container_name' | while IFS="|" read -r manifest_file_rel_path k8s_container_name; do
          echo "--- Processing manifest: ${manifest_file_rel_path} for container: ${k8s_container_name} (Service: ${{ matrix.service.name }}) ---"

          if [ ! -f "${manifest_file_rel_path}" ]; then
            echo "::error::Manifest file '${manifest_file_rel_path}' not found in manifest repo for service ${{ matrix.service.name }}!"
            continue 
          fi
          
          yq_expression=""
          if [[ "${manifest_file_rel_path}" == *"/cronjob.yaml" ]]; then
            yq_expression="(.spec.jobTemplate.spec.template.spec.containers[] | select(.name == \"${k8s_container_name}\") ).image = \"${TARGET_IMAGE_WITH_TAG}\""
          else
            yq_expression="(.spec.template.spec.containers[] | select(.name == \"${k8s_container_name}\") ).image = \"${TARGET_IMAGE_WITH_TAG}\""
          fi

          echo "Attempting to update image for container '${k8s_container_name}' to '${TARGET_IMAGE_WITH_TAG}' in '${manifest_file_rel_path}' using expression: ${yq_expression}"
          original_content=$(cat "${manifest_file_rel_path}")
          
          if yq -i "${yq_expression}" "${manifest_file_rel_path}"; then
            updated_content=$(cat "${manifest_file_rel_path}")
            if [[ "${original_content}" != "${updated_content}" ]]; then
              echo "Successfully updated image for container '${k8s_container_name}' in ${manifest_file_rel_path}"
              git add "${manifest_file_rel_path}" 
            else
              echo "::warning::yq command for container '${k8s_container_name}' in ${manifest_file_rel_path} (service: ${{ matrix.service.name }}) executed but the file content did not change. Image might be already up-to-date or yq expression found no match (e.g. wrong container name: '${k8s_container_name}')."
            fi
          else
            echo "::error::yq command failed to update image for container '${k8s_container_name}' in ${manifest_file_rel_path} (service: ${{ matrix.service.name }}). YQ expression was: ${yq_expression}"
          fi
        done

        if ! git diff --staged --quiet; then
          echo "Manifest file(s) were modified and staged for ${{ matrix.service.name }}."
          echo "manifest_actually_changed=true" >> $GITHUB_OUTPUT
          echo "Staged files:"
          git diff --staged --name-only
        else
          echo "No manifest files were modified or staged by this update for ${{ matrix.service.name }}."
          echo "manifest_actually_changed=false" >> $GITHUB_OUTPUT
        fi

    - name: Commit and Push Manifest Changes for ${{ matrix.service.name }}
      if: steps.update_manifests_script.outputs.manifest_actually_changed == 'true'
      env:
        IMAGE_TAG_FOR_COMMIT: ${{ steps.image_tag_generator.outputs.image_tag }}
      run: |
        cd manifests-repo
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        COMMIT_MSG="Update ${{ matrix.service.name }} image to tag $IMAGE_TAG_FOR_COMMIT [CI]"
        echo "Committing changes with message: $COMMIT_MSG"
        git commit -m "$COMMIT_MSG"
        echo "Pushing changes to branch ${{ env.MANIFEST_REPO_BRANCH }}..."
        for i in 1 2 3; do
          if git push origin ${{ env.MANIFEST_REPO_BRANCH }}; then
            echo "Push successful for ${{ matrix.service.name }} on attempt $i."
            break 
          fi
          if [ $i -lt 3 ]; then
            echo "::warning::Push attempt $i failed for ${{ matrix.service.name }}. Retrying in 10 seconds..."
            sleep 10
          else
            echo "::error::Push failed for ${{ matrix.service.name }} after $i attempts. Check PAT permissions and branch protection rules for '${{ env.MANIFEST_REPO_BRANCH }}' in repo '${{ env.MANIFEST_REPO_OWNER }}/${{ env.MANIFEST_REPO_NAME }}'."
            exit 1 
          fi
        done

    - name: Debug Job Information for ${{ matrix.service.name }}
      if: always() 
      shell: bash 
      run: |
        echo "::group::Debug Information for ${{ matrix.service.name }} (ID: ${{ matrix.service.id }})"
        echo "Service Directory: ${{ matrix.service.dir }}"
        echo "Image Repo Name: ${{ matrix.service.image_repo_name }}"
        echo "--- Needs Check ---"
        echo "Output from detect-changed-services (all changed): ${{ needs.detect-changed-services.outputs.changed_services_json }}"
        echo "Any service changed flag from detect-changed-services: ${{ needs.detect-changed-services.outputs.any_service_changed }}"
        echo "--- Build Trigger for this service instance ---"
        echo "Build Required (this instance): ${{ steps.service_build_needed.outputs.build_required }}"
        echo "--- Image Tag ---"
        echo "Generated Image Tag (this instance): ${{ steps.image_tag_generator.outputs.image_tag }}"
        echo "--- Build & Push (this instance) ---"
        echo "Build Outcome: ${{ steps.build_and_push_service.outcome }}"
        echo "Build Digest: ${{ steps.build_and_push_service.outputs.digest }}"
        echo "Image Successfully Built (evaluation): ${{ steps.build_evaluation.outputs.image_successfully_built }}"
        echo "--- Manifest Update (this instance) ---"
        echo "Manifest Actually Changed: ${{ steps.update_manifests_script.outputs.manifest_actually_changed }}"
        echo "::endgroup::"